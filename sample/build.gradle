plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.sinx.sample"
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'WEB_SOCKET_URL', "\"" + getLocalIPv4().toString() + "\""
            buildConfigField 'boolean', 'ENABLE_LOG', "true"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    def lifecycle_version = "2.4.0-rc01"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.squareup.okio:okio:2.10.0'
}


static def getLocalIPv4() {
    def ip4 = ""
    NetworkInterface.getNetworkInterfaces()
            .find { it.isUp() && !it.isLoopback() && !it.isVirtual() }
            .each {
                it.getInetAddresses()
                        .find { !it.isLoopbackAddress() && it instanceof Inet4Address }
                        .each { ip4 = it.getHostAddress() }
            }
    return ip4
}

task printIP {
    doLast {
        println getLocalIPv4()
    }
}